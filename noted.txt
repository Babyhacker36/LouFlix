const API_KEY = '5cd640db7a351fb891b792aab5d5ad11'; // Replace with your TMDb API key
const BASE_URL = 'https://api.themoviedb.org/3';



Card Modal

Poster Category  Video Director, Cast Tickets Reviews from other youtubes videos,, rotten tomatoe reviews
Streaming on , Tickets Purchase dvds

Page Streaming Guide

Home page

Jubotron

Movies Most Popular  By Date New to old  
Top Tv shows Most Popular  New to old



Top movies

Page Calender

 Page Now streaming
 Streaming guides with links to shows


 //working code ==================


 -------------------------


 
import React, { useRef, useEffect, useState } from 'react';
import { fetchNowPlayingMovies, fetchUpcomingMovies } from '../../Api/moviesApi';
import './MoviesSlider.css';

const MoviesSlider = () => {
  const [movies, setMovies] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [itemsToShow, setItemsToShow] = useState(1); // Number of cards to show
  const sliderRef = useRef(null);

  // Fetch movies
  useEffect(() => {
    const getMovies = async () => {
      try {
        setLoading(true);
        const nowPlayingMovies = await fetchNowPlayingMovies(1);
        const upcomingMovies = await fetchUpcomingMovies(1);
        const mergedMovies = [
          ...nowPlayingMovies,
          ...upcomingMovies,
        ]
          .filter((movie, index, self) => self.findIndex((m) => m.id === movie.id) === index)
          .sort((a, b) => new Date(b.release_date) - new Date(a.release_date));
        setMovies(mergedMovies);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch movies. Please try again later.');
        setLoading(false);
      }
    };

    getMovies();
  }, []);

  // Update the number of visible items dynamically
  useEffect(() => {
    const updateItemsToShow = () => {
      const screenWidth = window.innerWidth;

      if (screenWidth <= 767) {
        setItemsToShow(1); // One card for smaller screens
      } else {
        const containerWidth = sliderRef.current?.offsetWidth || screenWidth;
        const cardWidth = 250; // Approximate width of each card
        const numberOfItems = Math.floor(containerWidth / cardWidth);
        setItemsToShow(numberOfItems > 0 ? numberOfItems : 1);
      }
    };

    updateItemsToShow();
    window.addEventListener('resize', updateItemsToShow);

    return () => {
      window.removeEventListener('resize', updateItemsToShow);
    };
  }, []);

  const scrollLeft = () => {
    const scrollAmount = sliderRef.current.offsetWidth / itemsToShow;
    sliderRef.current.scrollBy({
      left: -scrollAmount,
      behavior: 'smooth',
    });
  };

  const scrollRight = () => {
    const scrollAmount = sliderRef.current.offsetWidth / itemsToShow;
    sliderRef.current.scrollBy({
      left: scrollAmount,
      behavior: 'smooth',
    });
  };

  if (loading) {
    return <div className="loading">Loading movies...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  if (movies.length === 0) {
    return <div className="no-movies">No movies available at the moment.</div>;
  }

  return (
    <div className="slider-container">
      <div className="slider-wrapper">
        <button className="arrow-btn left" onClick={scrollLeft}>
          &#9664;
        </button>
        <div className="movies-slider" ref={sliderRef}>
          {movies.map((movie) => (
            <div
              key={movie.id}
              className="movie-card"
              style={{
                flex: `0 0 ${100 / itemsToShow}%`, // Dynamic card width
                maxWidth: `${100 / itemsToShow}%`,
              }}
            >
              <img
                src={movie.poster_path ? `https://image.tmdb.org/t/p/w500${movie.poster_path}` : '/fallback-image.jpg'}
                alt={movie.title}
                className="movie-image"
              />
              <h2 className="movie-title">{movie.title}</h2>
              <p className="movie-release-date">{movie.release_date}</p>
              <p className="movie-score">Score: {movie.vote_average}</p>
            </div>
          ))}
        </div>
        <button className="arrow-btn right" onClick={scrollRight}>
          &#9654;
        </button>
      </div>
    </div>
  );
};

export default MoviesSlider;




back up to the home container 

back up to the home container css 

/* Container for all movies */
.movies-container {
    padding: 20px;
    background-color: #f4f4f4;
  }
  
  /* Header styling */
  h1 {
    text-align: left;
    color: #333;
    margin-bottom: 30px;
  }
  
  /* Styling the movie list */
  .movies-list {
    display: grid; /* Use CSS Grid for better control */
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Adjust columns based on available space */
    gap: 20px; /* Spacing between cards */
    margin-bottom: 20px; /* Margin between rows */
  }
  
  /* Movie card styling */
  .movie-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Hover effect for movie card */
  .movie-card:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
  }
  
  /* Movie poster styling */
  .movie-image {
    width: 100%;
    height: 350px;
    object-fit: cover;
    border-bottom: 2px solid #ddd;
  }
  
  /* Movie details section */
  .movie-details {
    padding: 10px;
    text-align: center;
  }
  
  /* Movie title styling */
  .movie-title {
    font-size: 18px;
    font-weight: bold;
    margin: 10px 0;
    color: #333;
  }
  
  /* Movie release date and score styling */
  .movie-release-date,
  .movie-score {
    font-size: 14px;
    color: #777;
    margin: 5px 0;
  }
  
  /* Button styling for ticket purchase */
  .purchase-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
  }
  
  .purchase-button:hover {
    background-color: #0056b3;
  }
  
  /* Loading and error message styling */
  .loading,
  .error {
    text-align: center;
    font-size: 20px;
    color: #333;
  }
  
  /* "Load More" Button Styling */
  .load-more-btn {
    margin: 20px auto;
    padding: 12px 20px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: block;
    width: 200px;
    transition: background-color 0.3s ease;
  }
  
  /* Hover effect for "Load More" button */
  .load-more-btn:hover {
    background-color: #218838;
  }
  
  /* Disabled state for "Load More" button */
  .load-more-btn:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }



  to fetch the genres of the movies 


    // Fetch movies
  useEffect(() => {
    const getMovies = async () => {
      try {
        setLoading(true);
        const nowPlayingMovies = await fetchNowPlayingMovies(1);
        const upcomingMovies = await fetchUpcomingMovies(1);
        const mergedMovies = [
          ...nowPlayingMovies,
          ...upcomingMovies,
        ]
          .filter((movie, index, self) => self.findIndex((m) => m.id === movie.id) === index)
          .sort((a, b) => new Date(b.release_date) - new Date(a.release_date));
        setMovies(mergedMovies);
        setLoading(false);
      } catch (err) {
        setError('Failed to fetch movies. Please try again later.');
        setLoading(false);
      }
    };

    getMovies();
  }, []);
